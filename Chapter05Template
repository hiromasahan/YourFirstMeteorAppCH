5 Template

随着创建了一个collection和输入了一些数据，我们可以开始建立了Leaderboard的应用程序的用户界面。 
首先，安装我们的应用程序的基本HTML结构,先打开HTML文件，并粘贴以下代码进去：

<head> 
  <title>Leaderboard</title>
</head>
<body>
  <h1>Leaderboard</h1> 
</body>

似乎有几件事情没从这个代码显示出来： 

1 我们没包括html标签。 
2 我们并没有包括任何的JavaScript文件。 
3，我们并没有包括任何CSS文件。 

我们并没有包括这些事情，因为我们并不需要包括他们。Meteor会保存好它们。它会自动包含HTML标记，亦包括我们的应用需要的任何CSS和JavaScript文件中。 
一个Meteor的核心原则是开发商的幸福，所以有很多方便的功能，这样也许会让你的开发的生活更轻松。 
35 
模板 
36 
￼The当前接口。 
模板37 
5.1创建模板 
截至接下来，我们要创建一个模板，并通过将我们的模板内用户界面的部分，我们可以使用JavaScript代码与他们进行互动。 （我们将看到一个这样的例子很快。） 
要创建一个模板，添加下面的代码在HTML文件中的闭合体标签下： 
<模板名称=“Leaderboard”>世界，你好 
</模板> 
模板有相当香草结构。我们使用这个模板标签，并附上姓名与此名称属性的模板。我命名这个模板“Leaderboard”，但不管你喜欢，你可以命名它。只知道，我们将引用它短期内是这样，按照往常一样，这有助于选择一个简单直接的名字，很容易记住。 
如果您将文件保存在当前状态下，虽然，模板不会出现在网页浏览器。这是我们原始的HTML代码，但在其他地方。 
怎么了？ 
好吧，模板默认不显示，因为在某些情况下： 
•您可能需要一个模板出现在特定的时间。 
•您可能需要一个模板，消失在特定的时间。 
•您可能需要一个模板出现在多个位置。 
因此，模板需要他们创建后手动包括在内。这可能会觉得自己只是一个额外的步骤，但我们得到了深入的发展，它会变得越来越有用。 
为了让“Leaderboard”模板显示在浏览器中，将body标签之间的标签： 
{{>Leaderboard}} 
所以，很显然，这不是一个HTML标记。双花括号意味着它是Meteor的模板引擎的一部分 - Spacebars。通过车把语法的启发，这是我们在HTML中使用，当我们想要的东西的动态发生的语法。我们将在本教程中使用Spacebars了很多，但，现在，只知道： 
1，所有Spacebars标签使用双大括号来区分自己。 2，我们只用大于号的时候，我们想用一个模板。 
在这个阶段中，HTML文件应该类似于： 
模板38 
<HEAD><标题>Leaderboard</ TITLE> 
</ HEAD> 
<正文> 
<H1>Leaderboard</ H1> 
 {{>Leaderboard}} 
</ BODY> 
<模板名称=“Leaderboard”>的Hello World 
</模板> 
保存文件后，“Hello World”文本应该出现在浏览器中。 
￼The模板现在出现。 
模板39 
5.2创建一个助手 
在我们的HTML文件中，我们有一个模板，但它是静态的。它不除显示器做什么无聊的“Hello World”文本。为了解决这个问题，我们可以创建一个助手，帮手是的附着于模板的JavaScript函数。这是最好的代码的理解，让我们写一些。 
切换到JavaScript文件，写在这里我们创建了集线下下面的语句： 
Template.leaderboard.player 
这是我们用它来创建一个辅助的语法，它有三个部分。 
首先，我们使用模板的关键字，通过我们的Meteor应用模板进行搜索。我们只有一个的时刻，但一个完整的应用程序可能有几十个甚至上百个。 
其次，我们采用了领先的关键字来引用我们先前创建的模板的名称。我们创建的每一个辅助函数需要被连接到一个单一的模板。 
第三，我们使用播放器关键字来命名我们的帮手。我们将引用这个名称在HTML文件中，并再次，你可以任何你喜欢的名字。 
附加代码，这个帮助，我们把它用一个函数，像这样联系起来： 
Template.leaderboard.player=函数（）{//代码放在这里 
} 
我们没有在这里做什么特别的事情。这只是一个普通的函数。这个函数内部的代码时，我们参考了球员的名字在我们的HTML文件将执行。 
然而，有一个问题。如果你保存文件，然后切换回谷歌Chrome浏览器，你会看到该应用程序被打破了。这是因为我们没有考虑到一个事实，即一些代码不能同时在客户端和服务器上运行。 
模板 
40 
￼An误差与我们的应用程序。 
由于我们正在与模板虽然 - 你知道的，用户界面的东西 - 它没有任何意义了这个辅助函数存在于服务器上。其结果是，Meteor不让它在服务器上运行和errror返回。 
我们所要做的就是把里面的isClient有条件的帮手： 
如果（Meteor.isClient）{
//把这里帮手 
} 
那么代码应该类似于： 
如果（Meteor.isClient）{Template.leaderboard.player=函数（）{//代码放在这里 
} 
} 
保存文件后，错误将消失。 
终于让我们的辅助函数的一些functinality，加一个return语句里面它： 
模板41 
Template.leaderboard.player=函数（）{返回“的球员名单应该在这里。”
} 
然后切换回HTML文件，去掉“Hello World”文本，然后将下面的标记的“Leaderboard”模板中： 
{{播放}} 
在这里，我们使用的是其他Spacebars标签（就证明了这双大括号）。 ，我们不是，但使用大于号。这是因为我们还没有包括的模板。我们是不是引用我们的辅助函数的名称和实现只用双大括号。 
保存文件后，从return语句的文本将显示在浏览器中。这不是一个大的和令人兴奋的功能，但是： 
1，这类似于我们将如何使用助手以后，所以简单是Meteor的特点，而不是我想让它的目的很简单。 
2，我们要利用佣工来检索我们收集了玩家和界面中显示出来，这是相当多的有趣。 
让我们继续。 
￼Text的return语句。 
模板42 
5.3每块 
内的“玩家”帮手，改变return语句如下： 
Template.leaderboard.player=函数（）{返回PlayersList.find（）; 
} 
在这里，我们使用了我们前面所覆盖的查找功能，像以前一样，我们将其连接到保存的球员名单收集。因为我们虽然把这个语句的帮手，大家可以参考这个函数模板中，并显示它的检索的数据。 
要做到这一点，切换到HTML文件，并删除此标记： 
{{播放}} 
这个标签确实参考我们的帮助，但不是我们想要的方式。相反，我们想要写在我们的“Leaderboard”模板中的以下内容： 
{{#each球员}} 
测试 
{{/每}} 
在这里，几件事情是怎么回事。 
首先，玩家正在检索引用了“玩家”功能。 
其次，我们遍历这些球员的每个块（再次使用Spacebars语法）。 
第三，我们要输出的单词“test”每个球员在列表中。从概念上讲，它就像我们有一个数组： 
VAR球员=['大卫'，'鲍勃'，'比尔'，'玛丽'，'股神'，'添']; 
......它就像我们使用foreach循环来遍历这个数组中的值： 
player.forEach（函数（）{的document.write（'测试'）; 
}）; 
其结果是，单词“test”出现的次数的量在接口将等于玩家的集合中的量。如果有六名球员集合中，单词“test”会出现六次。 
我们已经创造了这个每个块中，我们也可以检索与我们提取数据相关的领域。我们提取从“PlayersList”收集的数据，所以我们可以从两个名称显示值和评分领域。 
为了使我们的名单显示玩家的名称列表，例如，我们可以这样写： 
模板43 
{{#each球员}} 
    {{名}} 
{{/每}} 
（当引用领域，我们周围有双大括号，并没有其他的字段名称。） 
玩家的名字列表。 
我们还可以显示玩家的分数他们的名字旁边： 
{{#each球员}} 
    {{名}}{{得分}} 
{{/每}} 
不过，虽然我不是太关心使用户界面漂亮 - 我总是发现，专注于设计技术的书是浪费时间 - 这是有益的，如果接口有稍微好一点的结构： 
<UL> 
{{/每}} 
</ UL> 
玩家的名字将出现在他们的名字旁边的分数列表。默认情况下，玩家将通过它们插入升序顺序（从旧到最小）集合日期进行排序。 
￼{{＃每个玩家}} 
<李>{{名}}{{得分}}</ LI> 
模板 
44 
球员和他们的分数￼A列表。 
如果你来的Meteor从任何其他架构或语言，你也许可以看到，我们得到了很多的功能，从少量的代码，它只是变得从这里更好。